.. _webapi_parse_option:

================================================
parse オプション
================================================

:ref:`webapi_parse`, :ref:`webapi_parseStructured`
などのメソッドでは、オプションパラメータを指定することでジオコーディング処理を無効にしたり、
パース処理に利用する辞書を実行時に制限することができる。

指定したオプションはその時だけ有効で、次回以降の parse 処理には影響しない。

オプション一覧
---------------------------------------------

オプションで利用可能なキーとその意味は以下の通り。

show-candidate
+++++++++++++++++++++++++++++++++++++++++++++

:name: show-candidate
:type: bool
:default: false
:例: "show-candidate":true

同綴地名が存在する場合、候補となる地名語を全て表示するかどうかを指定する。ジオコーダを利用している場合には、このオプションにより、候補となる住所を全て表示するかどうかも指定できる。

*false* を指定した場合、最も確度の高い地名語のみ表示する。

*true* を指定した場合、全ての地名語候補を表示する。

show-score
+++++++++++++++++++++++++++++++++++++++++++++

:name: show-score
:type: bool
:default: false
:例: "show-score":true

地名解決の際に内部的に付与された「スコア」をレスポンスに含めるかどうかを指定する。 *threshold* オプションのしきい値を決める際などに利用する。

*false* を指定した場合、スコアは含まれない。

*true* を指定した場合、スコアが含まれる。

geocoding
+++++++++++++++++++++++++++++++++++++++++++++

:name: geocoding
:type: bool | string
:default: "normal"
:例: "geocoding":false, "geocoding":"full"

ジオコーダの有効、無効および出力結果の細かさを指定する。

*false* または *"none"* を指定した場合、ジオコーダを無効にする。

*"minimum"* を指定した場合、ジオコーダを有効にし、最小限の結果を返す。

*true* または *"normal"* を指定した場合、ジオコーダを有効にし、
住所に含まれる地名語の *geonlp_id* を結果に含める。

*"full"* を指定した場合、ジオコーダを有効にし、
住所に含まれる地名語の全ての属性（ *geonlp_id* を含む）を結果に含める。

ジオコーダを無効にした場合、住所文字列に含まれる地名語はそれぞれ個別の
地名語として抽出される。

adjunct
+++++++++++++++++++++++++++++++++++++++++++++

:name: adjunct
:type: bool
:default: false
:例: "adjunct":true

地名修飾語（「喜多方ラーメン」の「喜多方」など）
を地名として抽出するか否かを指定する（true の時抽出）。

地名修飾語かどうかの判断は、地名語の直後の品詞によって決定する。
たとえば一般名詞が後続した場合には地名修飾語とする。

threshold
+++++++++++++++++++++++++++++++++++++++++++++

:name: threshold
:type: int
:default: 0
:例: "threshold":0

地名語を抽出する際のしきい値を指定する。
小さいほど抽出されやすく、0を指定した場合は、地名語の可能性のある候補が全て抽出される。
たとえば「川崎」のような地名語は、
threshold がデフォルト値の場合には、周辺の地名語（「神奈川」「横浜」など）が出現しない限り、
地名語として抽出されないが、threshold を下げることによって抽出することができる。

しかし人名の姓だけが出現している場合などにも地名語として誤抽出されてしまう可能性が高くなる。

set-dic
+++++++++++++++++++++++++++++++++++++++++++++

:name: set-dic
:type: int[]
:default: []
:例: "set-dic":[1,2,3]（辞書id=1,2,3の辞書だけを利用）
     "set-dic":[]（すべての辞書を利用）

特定の辞書だけを利用したい場合、その辞書のidの配列を指定すると、
指定した辞書だけを利用する。デフォルトの設定によらない。

空の配列を指定すると全辞書を利用する。

add-dic
+++++++++++++++++++++++++++++++++++++++++++++

:name: add-dic
:type: int[]
:default: []
:例: "add-dic":[41,42]（辞書id=41,42,3の辞書を追加）

デフォルトの設定で利用されない辞書を一時的に利用したい場合、
その辞書のidの配列を指定する。

remove-dic
+++++++++++++++++++++++++++++++++++++++++++++

:name: remove-dic
:type: int[]
:default: []
:例: "remove-dic":[3,4]（辞書id=3,4の辞書を利用しない）

デフォルトの設定で利用される辞書を一時的に利用したくない場合、
その辞書のidの配列を指定する。
`set-dic` や `add-dic` と同じ id が指定された場合、
`remove-dic` が優先される（つまりその辞書は利用されない）。


set-class
+++++++++++++++++++++++++++++++++++++++++++++

:name: set-class
:type: string[]
:default: []
:例: "set-class":["State.*", "City.*"]

特定の固有名クラスだけを対象としたい場合、そのクラス名の正規表現の配列を指定する。
デフォルトの設定によらない。

正規表現は「クラス名に含まれているパターン」ではなく、
「クラス名と一致するパターン」を指定しなければならない。
たとえば "Station.*" は "SubwayStation" とは一致しないので、
"SubwayStation" も対象としたいのであれば ".*Station.*" と指定する。

空の配列を指定すると固有名クラスのチェックを行わない。
全てのクラスを対象とする場合には ".*" を指定するより、
空の配列を指定した方が高速に処理できる。

add-class
+++++++++++++++++++++++++++++++++++++++++++++

:name: add-class
:type: string[]
:default: []
:例: "add-class":["Hospital"]（"Hospital"という固有名クラスを利用する）

デフォルトの設定で利用されない固有名クラスを一時的に利用したい場合、
そのクラス名の正規表現の配列を指定する。

remove-class
+++++++++++++++++++++++++++++++++++++++++++++

:name: remove-class
:type: string[]
:default: []
:例: "remove-class":["PoliceStation", "FireStation"]（"PoliceStation",
     "FireStation"という固有名クラスを利用しない）

デフォルトの設定で利用される固有名クラスを一時的に利用したくない場合、
そのクラス名の正規表現の配列を指定する。
`set-class` や `add-class` に含まれる正規表現が指定された場合、
`remove-class` が優先される（つまりその固有名クラスは利用されない）。

たとえば全ての「駅」を対象に追加したいが「警察署」「消防署」は対象としたくない場合、
"add-class":[".*Station.*"], "remove-class":["PoliceStation", "FireStation"] と書く。
